import{a as v}from"./chunk-PZRUESVB.js";import{a as u}from"./chunk-UCASUQWF.js";import{I as g,S as y,a as r,b as n,da as o,ga as i,la as h,qa as F,s as f}from"./chunk-UI7FGHJG.js";var d=class s{constructor(l){this.http=l}getAllfleetManagers(){return this.http.get("http://localhost:3000/fleetManagers")}getSinglefleetManager(l){return this.http.get(`http://localhost:3000/fleetManagers?name=${l}`)}createFleetMamager(l){return this.http.post("http://localhost:3000/fleetManagers",l)}createFleet(l){return this.http.post("http://localhost:3000/fleets",l)}getAllFleets(){return this.http.get("http://localhost:3000/fleets")}getSingleFleetData(l){return this.http.get(`http://localhost:3000/fleets/${l}`)}EditFleetData(l,e){return this.http.put(`http://localhost:3000/fleets/${l}`,e)}DeleteFleetData(l){return this.http.delete(`http://localhost:3000/fleets/${l}`)}static \u0275fac=function(e){return new(e||s)(F(u))};static \u0275prov=h({token:s,factory:s.\u0275fac,providedIn:"root"})};var D=class s extends v{constructor(e){super({FleetData:[],fleetManagers:[],singleFleetManager:{},fleetReadById:{}});this._FleetService=e}FleetData$=this.select(e=>e.FleetData);FleetDataById$=this.select(e=>e.fleetReadById);FleetManagers$=this.select(e=>e.fleetManagers);SingleFleetManager$=this.select(e=>e.singleFleetManager);loadFleetData=this.updater((e,t)=>n(r({},e),{FleetData:t}));loadFleetManagers=this.updater((e,t)=>n(r({},e),{fleetManagers:t}));fleedDataById=this.updater((e,t)=>n(r({},e),{fleetReadById:t}));singleFleetManager=this.updater((e,t)=>n(r({},e),{singleFleetManager:t}));createFleet=this.updater((e,t)=>n(r({},e),{FleetData:[...e.FleetData,t]}));createFleetManager=this.updater((e,t)=>n(r({},e),{fleetManagers:[...e.fleetManagers,t]}));deleteFleet=this.updater((e,t)=>{let a=e.FleetData.filter((p,c)=>p.id!=t);return n(r({},e),{FleetData:a})});updateFleet=this.updater((e,{updId:t,updFleetData:a})=>{let p=e.FleetData.map(c=>c.id===t?r(r({},c),a):c);return n(r({},e),{FleetData:p})});loadAllFleets=this.effect(e=>e.pipe(y(()=>this._FleetService.getAllFleets().pipe(i(t=>{console.log("2"),console.log("Data received from API:",t),this.loadFleetData(t)}),g(t=>(console.error("Error fetching Fleets:",t),f([])))))));loadAllFleetManagers=this.effect(e=>e.pipe(y(()=>this._FleetService.getAllfleetManagers().pipe(i(t=>{console.log("2"),console.log("Data received from API:",t),this.loadFleetManagers(t)}),g(t=>(console.error("Error fetching Fleets:",t),f([])))))));addSingleFleetData=this.effect(e=>e.pipe(o(t=>this._FleetService.createFleet(t).pipe(i(a=>{this.createFleet(a)})))));addSingleFleetManager=this.effect(e=>e.pipe(o(t=>this._FleetService.createFleetMamager(t).pipe(i(a=>{this.createFleetManager(a)})))));deleteSingleFleetData=this.effect(e=>e.pipe(o(t=>this._FleetService.DeleteFleetData(t).pipe(i(a=>{a&&this.deleteFleet(t)})))));updateSingleFleetData=this.effect(e=>e.pipe(o(({updId:t,updFleetData:a})=>this._FleetService.EditFleetData(t,a).pipe(i(p=>{p&&this.updateFleet({updId:t,updFleetData:a})})))));getFleetDataById=this.effect(e=>e.pipe(o(t=>this._FleetService.getSingleFleetData(t).pipe(i(a=>{a&&this.fleedDataById(a)})))));getSingleFleetManager=this.effect(e=>e.pipe(o(t=>this._FleetService.getSinglefleetManager(t).pipe(i(a=>{a&&this.singleFleetManager(a)})))));static \u0275fac=function(t){return new(t||s)(F(d))};static \u0275prov=h({token:s,factory:s.\u0275fac})};export{d as a,D as b};
